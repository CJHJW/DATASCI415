pbirthday(23)
qbirthday(0.5)
# Matching problem simulation
n <- 100 # number of cards
r <- replicate(10^4,sum(sample(n)==(1:n))) # shuffle,count matches
sum(r>=1)/10^4 # proportion with a match,result is close to 1-1/e
# Birthday problem calculation and simulation
k <- 23
1-prod((365-k+1):365)/365^k
pbirthday(23)
qbirthday(0.5)
pbirthday(23,coincident = 3) # triple match
qbirthday(0.5,coincident = 3) # triple match
tabulate(b)
b <- sample(1:365,23,replace = TRUE)
tabulate(b)
max(tabulate(b))
r <- replicate(10^4,max(tabulate(sample(1:365,23,replace = TRUE))))
sum(r>=2)/10^4
sum(r>=2)/10^4
source("~/1.R")
gc()
r <- replicate(10^4,max(tabulate(sample(1:365,23,replace = TRUE))))
r
# 4.4EM聚类
library(mclust)
EM1 <- Mclust(faithful)
install.packages("mclust")
# 4.4EM聚类
library(mclust)
EM1 <- Mclust(faithful)
summary(EM1,parameter=TRUE)
plot(EM1, what = 'classification')
?c()
library(MASS)
X_train <- c(-3, -2, 0, 1, -1, 2, 3, 4, 5)
Y_train <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1, 1))
training_data <- data.frame(X = X_train, Y = Y_train)
lda_model <- lda(Y ~ X, data = training_data)
lda_model
lda_pred <- predict(lda_model)$class
lda_error <- mean(lda_pred != Y_train)
lda_error
lda_model$scaling
qda_pred <- predict(qda_model)$class
qda_error <- mean(qda_pred != Y_train)
qda_model <- qda(Y ~ X, data = training_data)
qda_model
qda_pred <- predict(qda_model)$class
qda_error <- mean(qda_pred != Y_train)
qda_error
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1)
lda_pred <- predict(lda_model, test_data)$class
test_data <- data.frame(X = X_test, Y = Y_test)
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1)
lda_pred <- predict(lda_model, test_data)$class
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1)
lda_pred <- predict(lda_model, test_data)$class
test_data <- data.frame(X = X_test, Y = Y_test)
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1)
lda_pred <- predict(lda_model, test_data)$class
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1))
test_data <- data.frame(X = X_test, Y = Y_test)
lda_pred <- predict(lda_model, test_data)$class
lda_error <- mean(lda_pred != Y_test)
lda_error
qda_pred <- predict(qda_model, test_data)$class
qda_error <- mean(qda_pred != Y_test)
qda_error
lda_pred
setwd("/Users/jiatao/Desktop/UMich/25Winter/DATASCI415/Homework/HW05")
Auto <- read.table("auto-data.txt")
Auto
View(Auto)
Auto <- read.table("auto-data.txt", header=TRUE)
Auto
View(Auto)
library(ISLR)
data(Auto)
View(Auto)
data(Auto)
setwd("/Users/jiatao/Desktop/UMich/25Winter/DATASCI415/Homework/HW05")
Auto <- read.table("auto-data.txt", header=TRUE)
library(ISLR)
data(Auto)
View(Auto)
median_mpg <- median(Auto$mpg)
Auto$mpg01 <- ifelse(Auto$mpg > mpg_median, 1, 0)
Auto$mpg01 <- ifelse(Auto$mpg > median_mpg, 1, 0)
View(Auto)
View(Auto)
plot(Auto$mpg01, Auto$cylinders)
boxplot(cylinders ~ mpg01, data=Auto)
boxplot(cylinders ~ mpg01, data=Auto,
main = "Boxplot of Cylinders by mpg_01",
xlab = "mpg_01",
ylab = "Cylinders",
col = c("blue", "green"),
border = "darkblue")
boxplot(cylinders ~ mpg01, data=Auto,
main = "Boxplot of Cylinders by mpg_01",
xlab = "mpg_01",
ylab = "Cylinders",
col = c("blue", "green"))
boxplot(displacement ~ mpg01, data=Auto,
main = "Boxplot of Displacement by mpg_01",
xlab = "mpg_01",
ylab = "Displacement",
col = c("blue", "green"))
plot(x=mpg01, y=displacement, data=Auto)
plot(x=Auto$mpg01, y=Auto$displacement)
plot(x=Auto$mpg, y=Auto$displacement)
boxplot(horsepower ~ mpg01, data=Auto,
main = "Boxplot of horsepower by mpg_01",
xlab = "mpg_01",
ylab = "horsepower",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$horsepower)
boxplot(displacement ~ mpg01, data=Auto,
main = "Boxplot of Displacement by mpg_01",
xlab = "mpg_01",
ylab = "Displacement",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$displacement)
boxplot(horsepower ~ mpg01, data=Auto,
main = "Boxplot of horsepower by mpg_01",
xlab = "mpg_01",
ylab = "horsepower",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$horsepower)
plot(x=Auto$mpg, y=Auto$cylinders)
xlab = "mpg_01",
boxplot(weight ~ mpg01, data=Auto,
main = "Boxplot of weight by mpg_01",
xlab = "mpg_01",
ylab = "weight",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$weight)
boxplot(acceleration ~ mpg01, data=Auto,
main = "Boxplot of acceleration by mpg_01",
xlab = "mpg_01",
ylab = "acceleration",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$acceleration)
boxplot(year ~ mpg01, data=Auto,
main = "Boxplot of year by mpg_01",
xlab = "mpg_01",
ylab = "year",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$year)
boxplot(origin ~ mpg01, data=Auto,
main = "Boxplot of origin by mpg_01",
xlab = "mpg_01",
ylab = "origin",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$origin)
boxplot(cylinders ~ mpg01, data=Auto,
main = "Boxplot of Cylinders by mpg_01",
xlab = "mpg_01",
ylab = "Cylinders",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$cylinders)
boxplot(displacement ~ mpg01, data=Auto,
main = "Boxplot of Displacement by mpg_01",
xlab = "mpg_01",
ylab = "Displacement",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$displacement)
boxplot(horsepower ~ mpg01, data=Auto,
main = "Boxplot of horsepower by mpg_01",
xlab = "mpg_01",
ylab = "horsepower",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$horsepower)
boxplot(weight ~ mpg01, data=Auto,
main = "Boxplot of weight by mpg_01",
xlab = "mpg_01",
ylab = "weight",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$weight)
boxplot(acceleration ~ mpg01, data=Auto,
main = "Boxplot of acceleration by mpg_01",
xlab = "mpg_01",
ylab = "acceleration",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$acceleration)
boxplot(year ~ mpg01, data=Auto,
main = "Boxplot of year by mpg_01",
xlab = "mpg_01",
ylab = "year",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$year)
boxplot(origin ~ mpg01, data=Auto,
main = "Boxplot of origin by mpg_01",
xlab = "mpg_01",
ylab = "origin",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$origin)
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
library(caTools)
split <- sample.split(Auto_mpg$mpg01, SplitRatio = 0.7)
split <- sample.split($mpg_01, SplitRatio = 0.7)
train_set <- subset(Auto_mpg, split == TRUE)
test_set <- subset(Auto_mpg, split == FALSE)
dim(train_set)
dim(test_set)
lda_model <- lda(mpg01 ~ weight, data = training_set)
lda_model
lda_model <- lda(mpg01 ~ weight, data = train_set)
lda_model
lda_pred <- predict(lda_model, test_set)$class
lda_error <- mean(lda_pred != test_set$mpg01)
lda_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
lda_model
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
log_model <- glm(mpg01 ~ weight, data = train_set, family = binomial)
summary(log_model)
test_probs <- predict(log_model, newdata = test_set, type = "response")
test_probs
test_probs <- predict(log_model, newdata = test_set)
test_probs
test_probs <- predict(log_model, newdata = test_set, type = "response")
test_probs
test_pred <- ifelse(test_probs > 0.5, 1, 0)
test_pred
conf_matrix <- table(Predicted = test_pred, Actual = test_set$mpg01)
print(conf_matrix)
log_error <- mean(test_pred != test_set$mpg01)
log_error
log_probs <- predict(log_model, newdata = test_set, type = "response")
log_probs
log_pred <- ifelse(test_probs > 0.5, 1, 0)
log_pred
log_error <- mean(test_pred != test_set$mpg01)
log_error
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_pred
log_error <- mean(test_pred != test_set$mpg01)
log_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
qda_model
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
log_model <- glm(mpg01 ~ weight, data = train_set, family = binomial)
summary(log_model)
log_probs <- predict(log_model, newdata = test_set, type = "response")
log_probs
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_pred
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_error <- mean(test_pred != test_set$mpg01)
log_error
log_error <- mean(log_pred != test_set$mpg01)
log_error
summary(log_model)
test_errors <- numeric(length(K_values))
test_errors
K_values <- 1:10
test_errors <- numeric(length(K_values))
test_errors
for (i in seq_along(K_values)) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
library(class)
train_X <- scale(train_set$weight)
test_X <- scale(test_set$weight)
train_Y <- train_set$mpg01
test_Y <- test_set$mpg01
K_values <- 1:10
test_errors <- numeric(length(K_values))
test_errors
for (i in seq_along(K_values)) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
# Print results
test_results <- data.frame(K = K_values, Test_Error = test_errors)
print(test_results)
K_values <- 1:20
test_errors <- numeric(length(K_values))
test_errors
for (i in seq_along(K_values)) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
# Print results
test_results <- data.frame(K = K_values, Test_Error = test_errors)
test_results
min(test_results)
idxmin(test_results)
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
# Print results
test_results <- data.frame(K = K_values, Test_Error = test_errors)
min(test_results)
# Print results
test_results <- data.frame(K = K_values, Test_Error = test_errors)
test_results
for (i in K_values) {
print(i)
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
print(pred_Y)
test_errors[i] <- mean(pred_Y != test_Y)
}
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
# Print results
test_results <- data.frame(K = K_values, Test_Error = test_errors)
test_results
which.min(test_results)
K_values[which.min(test_results)]
which.min(test_errors)
min(test_errors)
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
K_values <- 1:30
test_errors <- numeric(length(K_values))
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
K_values <- 1:30
test_errors <- numeric(length(K_values))
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
K_values <- 1:20
test_errors <- numeric(length(K_values))
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
which.min(test_errors)
min(test_errors)
test_errors
data.frame(Errors = test_errors, K = K_values)
library(MASS)
X_train <- c(-3, -2, 0, 1, -1, 2, 3, 4, 5)
Y_train <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1, 1))
training_data <- data.frame(X = X_train, Y = Y_train)
lda_model <- lda(Y ~ X, data = training_data)
lda_model
lda_pred <- predict(lda_model)$class
lda_error <- mean(lda_pred != Y_train)
lda_error
X_train <- c(-3, -2, 0, 1, -1, 2, 3, 4, 5)
Y_train <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1, 1))
training_data <- data.frame(X = X_train, Y = Y_train)
lda_model <- lda(Y ~ X, data = training_data)
lda_pred <- predict(lda_model)$class
lda_error <- mean(lda_pred != Y_train)
lda_error
qda_model <- qda(Y ~ X, data = training_data)
qda_pred <- predict(qda_model)$class
qda_error <- mean(qda_pred != Y_train)
qda_error
X_test <- c(-1.5, -1, 0, 1, 0.5, 1, 2.5, 5)
Y_test <- factor(c(-1, -1, -1, -1, 1, 1, 1, 1))
test_data <- data.frame(X = X_test, Y = Y_test)
lda_pred <- predict(lda_model, test_data)$class
lda_error <- mean(lda_pred != Y_test)
lda_error
qda_pred <- predict(qda_model, test_data)$class
qda_error <- mean(qda_pred != Y_test)
qda_error
library(ISLR)
data(Auto)
median_mpg <- median(Auto$mpg)
Auto$mpg01 <- ifelse(Auto$mpg > median_mpg, 1, 0)
boxplot(weight ~ mpg01, data=Auto,
main = "Boxplot of weight by mpg_01",
xlab = "mpg_01",
ylab = "weight",
col = c("blue", "green"))
plot(x=Auto$mpg, y=Auto$weight)
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
library(caTools)
split <- sample.split(Auto_mpg$mpg01, SplitRatio = 0.7)
train_set <- subset(Auto_mpg, split == TRUE)
test_set <- subset(Auto_mpg, split == FALSE)
lda_model <- lda(mpg01 ~ weight, data = train_set)
lda_model
lda_pred <- predict(lda_model, test_set)$class
lda_error <- mean(lda_pred != test_set$mpg01)
lda_error
lda_model <- lda(mpg01 ~ weight, data = train_set)
lda_pred <- predict(lda_model, test_set)$class
lda_error <- mean(lda_pred != test_set$mpg01)
lda_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
log_model <- glm(mpg01 ~ weight, data = train_set, family = binomial)
summary(log_model)
log_probs <- predict(log_model, newdata = test_set, type = "response")
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_error <- mean(log_pred != test_set$mpg01)
log_error
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
library(caTools)
seed(123)
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
library(caTools)
split <- sample.split(Auto_mpg$mpg01, SplitRatio = 0.7)
train_set <- subset(Auto_mpg, split == TRUE)
test_set <- subset(Auto_mpg, split == FALSE)
lda_model <- lda(mpg01 ~ weight, data = train_set)
lda_pred <- predict(lda_model, test_set)$class
lda_error <- mean(lda_pred != test_set$mpg01)
lda_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
log_model <- glm(mpg01 ~ weight, data = train_set, family = binomial)
summary(log_model)
log_probs <- predict(log_model, newdata = test_set, type = "response")
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_error <- mean(log_pred != test_set$mpg01)
log_error
library(class)
train_X <- scale(train_set$weight)
test_X <- scale(test_set$weight)
train_Y <- train_set$mpg01
test_Y <- test_set$mpg01
K_values <- 1:20
test_errors <- numeric(length(K_values))
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
data.frame(Errors = test_errors, K = K_values)
which.min(test_errors)
min(test_errors)
Auto_mpg <- data.frame(mpg01 = Auto$mpg01, weight = Auto$weight)
library(caTools)
set.seed(123)
split <- sample.split(Auto_mpg$mpg01, SplitRatio = 0.7)
train_set <- subset(Auto_mpg, split == TRUE)
test_set <- subset(Auto_mpg, split == FALSE)
lda_model <- lda(mpg01 ~ weight, data = train_set)
lda_pred <- predict(lda_model, test_set)$class
lda_error <- mean(lda_pred != test_set$mpg01)
lda_error
qda_model <- qda(mpg01 ~ weight, data = train_set)
qda_pred <- predict(qda_model, test_set)$class
qda_error <- mean(qda_pred != test_set$mpg01)
qda_error
log_model <- glm(mpg01 ~ weight, data = train_set, family = binomial)
summary(log_model)
log_probs <- predict(log_model, newdata = test_set, type = "response")
log_pred <- ifelse(log_probs > 0.5, 1, 0)
log_error <- mean(log_pred != test_set$mpg01)
log_error
library(class)
train_X <- scale(train_set$weight)
test_X <- scale(test_set$weight)
train_Y <- train_set$mpg01
test_Y <- test_set$mpg01
K_values <- 1:20
test_errors <- numeric(length(K_values))
for (i in K_values) {
pred_Y <- knn(train = train_X, test = test_X, cl = train_Y, k = K_values[i])
test_errors[i] <- mean(pred_Y != test_Y)
}
data.frame(Errors = test_errors, K = K_values)
which.min(test_errors)
min(test_errors)
